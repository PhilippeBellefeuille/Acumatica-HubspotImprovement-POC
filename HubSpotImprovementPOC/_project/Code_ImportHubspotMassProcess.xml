<Graph ClassName="ImportHubspotMassProcess" Source="#CDATA" IsNew="True" FileType="NewGraph">
    <CDATA name="Source"><![CDATA[using System;
using System.Linq;
using System.Collections.Generic;
using System.Collections;
using PX.Data;
using PX.Api;
using PX.DataSync.HubSpot;
using Newtonsoft.Json;
using PX.Common;

namespace PX.Objects.HS
{
    #region Descriptor

    public class HubstopProviderTypeName : Constant<string>
    {
        public HubstopProviderTypeName() : base(typeof(HSImpSYProvider).FullName)
        {
        }
    }

    public class PXSYMappingHubspotActiveSelector : PXSYMappingSelector
    {

        public PXSYMappingHubspotActiveSelector()
            : base(typeof(SYMappingActive.name))
        { }

        protected override IEnumerable GetRecords()
        {
            PXView selector = new PXView(this._Graph, true, PXSelect<SYMappingHubspotActive,
                                                                Where<SYMappingActive.isActive,
                                                                    Equal<True>,
                                                                And<SYMappingActive.mappingType,
                                                                    Equal<Current<SYMappingActive.mappingType>>>>>.GetCommand());

            return PXSYMappingSelector.GetMappings<SYMappingHubspotActive>(selector);
        }

        //Note: PXSYMappingSelector.GetMappings won't work with PXSelectJoin so using a projection to filter to only HubspotProvider
        [Serializable]
        [PXBreakInheritance]
        [PXProjection(typeof(Select2<SYMappingActive,
                InnerJoin<SYProvider,
                    On<SYMappingActive.providerID,
                        Equal<SYProvider.providerID>>>,
                Where<SYProvider.providerType, Equal<HubstopProviderTypeName>>>))]
        public class SYMappingHubspotActive : SYMappingActive
        {
        }
    }

    public class PXSYHubspotListIDAttribute : PXCustomSelectorAttribute
    {
        public class HSContactList : IBqlTable
        {
            #region ListID 
            public abstract class listId : IBqlField { }

            [PXInt(IsKey = true)]
            [PXUIField(DisplayName = "List ID", Visible = false)]
            public virtual int? ListID { get; set; }
            #endregion

            #region ListName 
            public abstract class listName : IBqlField { }

            [PXString]
            [PXUIField(DisplayName = "Name", Visibility = PXUIVisibility.SelectorVisible)]
            public virtual string ListName { get; set; }
            #endregion
        }

        protected Type _MappingName;

        public PXSYHubspotListIDAttribute(Type mappingName) : base(typeof(HSContactList.listId))
        {
            _MappingName = mappingName;
        }

        public IEnumerable GetRecords()
        {
            PXCache cache = _Graph.Caches[BqlCommand.GetItemType(_MappingName)];

            if (cache.Current == null)
                yield break;

            string mappingName = (string)cache.GetValue(cache.Current, _MappingName.Name);

            foreach (var contactList in HSImpSYProvider.ContactListProvider.GetContactLists(mappingName))
            {
                yield return new HSContactList()
                {
                    ListID = contactList.listId,
                    ListName = contactList.name
                };
            }
        }
    }

    public class HSImpSYProvider : HSSYProvider
    {
        //Note: Can't access it because private so copying it for now
        protected const string _HapikeyParam = "Hapikey";
        protected const string _UrlParam = "URL";
        protected const string _ContactListIDParam = "HubSpotList";
        protected const string _PortalIDParam = "PortalID";
        protected const string _ClearHubListAfterImport = "ClearHubListAfterImport";
        protected const String _HubSpotDelay = "HubSpotDelay";
        protected const String _Contacts = "Contacts";
        protected const int _NumerofContactinRequest = 100;
        protected const int _NumerofListinRequest = 20;

        protected override List<PXStringState> FillParameters()
        {
            List<PXStringState> ret = base.FillParameters().Where(prm => prm.Name != _ContactListIDParam).ToList();
            return ret;
        }

        //Note: Exctacted from the base function  GetCurrentContactLists(bool IsImport = false) 
        public List<ContactList> GetAllContactList()
        {
            var contactList = new List<ContactList>();

            string Resource = string.Format("contacts/v1/lists?count={0}&hapikey={1}",
                _NumerofListinRequest, GetParameter(_HapikeyParam));

            var response = HubRequestGet(Resource);
            var listcontactList = JsonConvert.DeserializeObject<ListContactList>(response.Content);
            contactList.AddRange(listcontactList.lists);
            int currentstartlist = 0;

            while (listcontactList.has_more == true)
            {
                int HubSpotDelay = 1;
                int.TryParse(GetParameter(_HubSpotDelay), out HubSpotDelay);
                System.Threading.Thread.Sleep(HubSpotDelay * 1000);

                currentstartlist = currentstartlist + _NumerofListinRequest;
                Resource = string.Format("contacts/v1/lists?count={0}&hapikey={1}&offset={2}",
                    _NumerofListinRequest, GetParameter(_HapikeyParam), currentstartlist);

                response = HubRequestGet(Resource);
                listcontactList = JsonConvert.DeserializeObject<ListContactList>(response.Content);

                if (listcontactList == null || listcontactList.has_more == null || listcontactList.lists == null)
                {
                    var error = JsonConvert.DeserializeObject<HubExportError>(response.Content);
                    throw new PXException(error.message);
                }
                contactList.AddRange(listcontactList.lists);
            }

            return contactList;
        }

        public class ContactListProvider
        {
            public static IEnumerable<ContactList> GetContactLists(string mappingName)
            {
                return PXDatabase.GetSlot<Definition, Definition.Parameters>(mappingName, new Definition.Parameters(mappingName), typeof(ContactList)).ContactLists;
            }

            private class Definition : IPrefetchable<Definition.Parameters>
            {
                public class Parameters
                {
                    public readonly string MappingName;

                    public Parameters(string mappingName)
                    {
                        this.MappingName = mappingName;
                    }
                }

                public List<ContactList> ContactLists;

                public void Prefetch(Parameters parameters)
                {
                    ContactLists = new List<ContactList>();

                    var mapping = (SYMappingActive)PXSelect<SYMappingActive,
                                                        Where<SYMappingActive.name,
                                                            Equal<Required<SYMappingActive.name>>>>.Select(new PXGraph(), parameters.MappingName);

                    if (mapping != null && mapping.ProviderID.HasValue)
                    {
                        var syProvider = SYProviderMaint.GetProvider(mapping.ProviderID.Value);
                        if (!(syProvider is HSImpSYProvider))
                            throw new PXException(Messages.SYProviderIsNotHubspotProvider);

                        var hubspotProvider = (HSImpSYProvider)syProvider;

                        foreach (var contactList in hubspotProvider.GetAllContactList())
                        {
                            ContactLists.Add(contactList);
                        }
                    }
                }
            }
        }


        public override string ProviderName
        {
            get { return PX.Data.PXMessages.Localize(Messages.HubSpotProviderImp); }
        }
    }

    [PX.Common.PXLocalizable()]
    public static class Messages
    {
        public const string HubSpotProviderImp = "Hubspot Provider 2.0";

        public const string SYProviderIsNotHubspotProvider = "Data Provider is not Hubspot";
    }

    #endregion

    public class HubSpotSYImportFilter : IBqlTable
    {
        #region MappingName
        public abstract class mappingName : IBqlField { }
        [PXString(128, IsUnicode = true, InputMask = "")]
        [PXDefault]
        [PXUIField(DisplayName = "Name", Visibility = PXUIVisibility.SelectorVisible)]
        [PXSYMappingHubspotActiveSelector]
        public virtual string MappingName { get; set; }
        #endregion

        #region HubspotListID
        public abstract class hubspotListID : IBqlField { }

        [PXInt]
        [PXUIField(DisplayName = "HubSpot List", Visibility = PXUIVisibility.SelectorVisible)]
        [PXSYHubspotListID(typeof(mappingName))]
        public virtual int? HubspotListID { get; set; }
        #endregion
    }

    public class HubSpotSYImportProcess : SYImportProcess
    {
        public new PXSave<SYMappingActive> Save;
        public PXInsert<SYMappingActive> Insert;
        public new PXCancel<SYMappingActive> Cancel;
        public PXFirst<SYMappingActive> First;
        public PXPrevious<SYMappingActive> Prev;
        public PXNext<SYMappingActive> Next;
        public PXLast<SYMappingActive> Last;

        public PXFilter<HubSpotSYImportFilter> Filter;

        public PXSelectJoin<SYMappingActive,
                    InnerJoin<SYProvider,
                        On<SYMappingActive.providerID,
                            Equal<SYProvider.providerID>>>,
                    Where<SYMappingActive.mappingType,
                            Equal<SYMappingActive.mappingType.typeImport>,
                    And<SYMappingActive.isActive,
                        Equal<True>,
                    And<SYProvider.providerType,
                        Equal<HubstopProviderTypeName>>>>> MappingsSingle;

        public HubSpotSYImportProcess()
        {
            PXUIFieldAttribute.SetEnabled<SYMappingActive.name>(MappingsSingle.Cache, null, true);
        }
        protected override void SYMappingActive_RowSelected(PXCache cache, PXRowSelectedEventArgs e)
        {
            var row = (SYMappingActive)e.Row;
            if (row == null)
                return;

            //Note: Populating dynamic Columns in the Grid. 
            var operation = this.Operation.Current;
            if (operation.MappingID != row.MappingID)
            {
                operation.MappingID = row.MappingID;
                this.GenerateDynamicColumns();
            }

            base.SYMappingActive_RowSelected(cache, e);
        }

        protected override void SYImportOperation_RowSelected(PXCache sender, PXRowSelectedEventArgs e)
        {
            // do not delete this override! (Raises NullRef exception)
        }

        [PXMergeAttributes(Method = MergeMethod.Merge)]
        [PXSYMappingHubspotActiveSelector]
        protected virtual void SYMappingActive_Name_CacheAttached(PXCache sender)
        {
        }
    }
}


//#region Import
//public PXAction<CABankStatement> import;
//[PXUIField(DisplayName = Messages.ImportStatement, MapEnableRights = PXCacheRights.Update, MapViewRights = PXCacheRights.Update, Enabled = true)]
//[PXProcessButton]
//public virtual IEnumerable Import(PXAdapter adapter)
//{
//    if (PXLongOperation.Exists(UID))
//    {
//        throw new ApplicationException(GL.Messages.PrevOperationNotCompleteYet);
//    }

//    CABankStatement doc = this.BankStatement.Current;
//    if (doc != null && doc.Released == true && doc.Hold == false)
//    {
//        string importScenatioName = "Import Bank Statement MOM";
//        SYMapping map = PXSelect<SYMapping, Where<SYMapping.name, Equal<Required<SYMapping.name>>>>.Select(this, importScenatioName);

//        /*if (map!= null && map.MappingID!= null)
//        {
//            string defaultFileName = 
//            PXLongOperation.StartOperation(this, delegate()
//            {

//                PX.Api.SYImportProcess.RunScenario(map.Name,
//                    new PX.Api.PXSYParameter(ExportProviderParams.FileName, defaultFileName),
//                    new PX.Api.PXSYParameter(ExportProviderParams.BatchNbr, doc.BatchNbr)
//                    //,
//                    //new PX.Api.PXSYParameter(ExportProviderParams.BatchSequenceStartingNbr, "0000")
//                    );
//            });
//        }
//        else
//        {
//            throw new PXException(Messages.CABatchExportProviderIsNotConfigured);
//        }*/
//    }

//    return adapter.Get();
//}

//#endregion]]></CDATA>
</Graph>